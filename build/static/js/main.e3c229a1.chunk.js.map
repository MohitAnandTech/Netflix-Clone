{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e3c229a1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n/** base url to make requests to the movie database */\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\tconst [ movies, setMovies ] = useState([]);\r\n\tconst [ trailerUrl, setTrailerUrl ] = useState(\"\");\r\n\r\n\r\n\t//A snippet of code which runs based on a specific condition/ variable.\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t//if [], run once when the row loads, dont run again.\r\n\t\t\tasync function fetchData() {\r\n\t\t\t\tconst request = await axios.get(fetchUrl);\r\n\t\t\t\tsetMovies(request.data.results);\r\n\t\t\t\treturn request;\r\n\t\t\t}\r\n\t\t\tfetchData();\r\n\t\t},\r\n\t\t[ fetchUrl ]);\r\n\r\n\t\tconst opts = {\r\n\t\t\theight: \"390\",\r\n\t\t\twidth: \"100%\",\r\n\t\t\tplayerVars: {\r\n\t\t\t\tautoplay: 1,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst handleClick= (movie)=> {\r\n\tif (trailerUrl) {\r\n\tsetTrailerUrl('');\r\n\t}\r\n\telse{\r\n\t\tmovieTrailer(movie?.name || \"\")\r\n\t\t.then(url=>{\r\n\t\tconst\turlParams = new URLSearchParams(new URL(url).search);\r\n\t\tsetTrailerUrl(urlParams.get(\"v\"));\r\n\t\t}).catch((error) => console.log(error));\r\n\t}\r\n\t\t}\r\n\r\n\tconsole.table(movies);\r\n\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<h2>{title}</h2>\r\n\r\n\t\t\t<div className=\"row__posters\">\r\n\t\t\t\t{/* sev(eral row__poster(s) */}\r\n\t\t\t\t{movies.map((movie) => (\r\n\t\t\t\t\t<img\r\n\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t\tonClick = {()=> handleClick(movie)}\r\n\t\t\t\t\tclassName={`row__poster ${isLargeRow && \"row__posterLarge\"}`} src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t{trailerUrl &&<Youtube videoId={trailerUrl} opts= {opts} />}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = '0e8225d23571d76e313d4fb20b929f53';\r\n\r\nconst requests = {\r\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n};\r\n\r\nexport default requests;\r\n","import React, {useState, useEffect} from 'react'\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\nconst [movie, setMovie] = useState([]);\r\n\r\nuseEffect(() => {\r\n   async function fetchData() {\r\nconst request = await axios.get(requests.fetchNetflixOriginals);\r\nsetMovie(\r\n    request.data.results[\r\n Math.floor(Math.random() * request.data.results.length - 1)\r\n    ]\r\n    );\r\nreturn request;\r\n   }\r\n    fetchData();\r\n}, []);\r\nconsole.log(movie);\r\n\r\nfunction truncate(str, n) {\r\n    return str?.length >n? str.substr(0 , n-1) + \"...\" : str;\r\n}\r\n\r\n\r\n    return (\r\n        <header className =\"banner\"   style ={ {\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            // backgroundPosition: \"center center\",\r\n        } } \r\n     >\r\n      \r\n        \r\n       \r\n        <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n        {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        </div>   \r\n\r\n        <div className=\"banner__buttons\">\r\n       \r\n        <button className=\"banner__button\">Play</button>\r\n       <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        \r\n        <h1 className=\" banner__description\"> {truncate(movie?.overview, 150)}</h1>\r\n      \r\n        <div className=\"banner--fadeBottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\nconst [show, handleShow] = useState(false); \r\n    useEffect(() => {\r\n      window.addEventListener(\"scroll\", ()=>{\r\n          if(window.scrollY>100){\r\n              handleShow(true);\r\n          }\r\n          else handleShow(false);\r\n      });\r\n      return()=>{\r\n          window.removeEventListener(\"scroll\");\r\n      };  \r\n        \r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n         <img\r\n         className=\"nav__logo\"\r\n         src=\"https://lh3.googleusercontent.com/proxy/DvdnRE_PbJnO0RmjICFhaZ8a7k1vWVbsmNNpuudF9-5B2trTk0673K1Dfvj5f8FfuK8WBI0AKeCw9t-l8467v7P2ewPlEk16wDQzMsq65ybJhfXhRmM\" \r\n         alt=\"Netflix Logo\"\r\n         />    \r\n\r\n         <img className=\"nav__avatar\" src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\" \r\n         alt=\"Netflix profile Logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\n import Nav from './Nav';\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t<Nav />\n\t\t<Banner />\n\t\t\t<Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n\t\t\t<Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n\t\t\t<Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n\t\t\t<Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n\t\t\t<Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n\t\t\t<Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n\t\t\t<Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n\t\t\t<Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}